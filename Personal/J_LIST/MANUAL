MANUAL :

j_list			*jlst_node(void);

Creates and returns a fresh node (allocated) with its data set to NULL, as well as next and previous, all other fields are set to 0 or equivalent.

j_list			*jlst_create(void);

Creates and returns a fresh list with initial length of 9, all datas and fields of the nodes of this list except 'previous' and 'next' are set to 0
or equivalent and 'list_len' is set to 9.

j_list			*jlst_new(int size);

Creates and returns a fresh list with initial length of size, all datas and fields of the nodes of this list except 'previous' and 'next' are set to 0
or equivalent and 'list_len' is set to size. If size is smaller than 1, the function returns NULL.

void			jlst_add(j_list **first_node, int index, void *data, size_t data_size, char alloc_);

This function takes the adress of the first node of a list, goes to the index'th index in this list and puts data in the corresponding node. If the
node already had a data, it'll be overwritten. Data_size of the node is reset to the new one as well as alloc_. If the pointer **first_node, or the
adress it points to are NULL or if the index is greater than the length of the list, the function  does nothing. If the effective size of the list
becomes greater than two third of its total length and JLST_AUTO_RESIZE is set, then the function will call auto_resize on the list.

void			jlst_push_front(j_list **first_node, void *data, size_t data_size, char alloc_);

Creates a new node containing data and pushes it in front of the list first_node refers to. If the whole pointer first_node is NULL, the function
simply does nothing, but if the deference refers to a NULL pointer then first_node will point to the new node, thus creating a list of length 1
containing data.
